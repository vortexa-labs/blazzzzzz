"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src"); // Replace with 'helius-sdk' in a production setting
const web3_js_1 = require("@solana/web3.js");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const helius = new src_1.Helius('YOUR_API_KEY');
        const wallet = new web3_js_1.PublicKey('D8vy6wcSCoJx3WzbJCHdd2enYBe5eKXU8N5vTESkX1sk');
        console.log('Fetching Helius-delegated stake accounts for:', wallet.toBase58());
        const stakeAccounts = yield helius.rpc.getHeliusStakeAccounts(wallet.toBase58());
        if (stakeAccounts.length === 0) {
            console.log('No stake accounts found delegated to Helius.');
            return;
        }
        for (const account of stakeAccounts) {
            const data = account.account.data;
            if (data && 'parsed' in data) {
                const info = data.parsed.info;
                const delegation = (_a = info.stake) === null || _a === void 0 ? void 0 : _a.delegation;
                console.log('---');
                console.log('Stake Pubkey:', account.pubkey.toBase58());
                console.log('Stake Amount:', delegation.stake / web3_js_1.LAMPORTS_PER_SOL, 'SOL');
                console.log('Delegated to:', delegation.voter);
                console.log('Activation Epoch:', delegation.activationEpoch);
                console.log('Deactivation Epoch:', delegation.deactivationEpoch);
            }
        }
    });
}
main().catch((err) => {
    console.error('Example failed:', err);
    process.exit(1);
});
