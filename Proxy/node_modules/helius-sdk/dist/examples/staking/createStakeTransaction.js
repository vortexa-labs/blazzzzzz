"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src"); // Replace with 'helius-sdk' in a production setting
const web3_js_1 = require("@solana/web3.js");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const helius = new src_1.Helius('YOUR_API_KEY');
        const ownerPubkey = new web3_js_1.PublicKey('YourWalletPublicKeyHere'); // Replace with your actual pubkey
        const { serializedTx, stakeAccountPubkey } = yield helius.rpc.createStakeTransaction(ownerPubkey, 1.5 // Amount in SOL (excluding rent exemption)
        );
        console.log('Stake Account:', stakeAccountPubkey.toBase58());
        console.log('Serialized Transaction:', serializedTx);
    });
}
main().catch((err) => {
    console.error('Example failed:', err);
    process.exit(1);
});
