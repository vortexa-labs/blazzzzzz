"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src"); // Replace with 'helius-sdk' in a production setting
const web3_js_1 = require("@solana/web3.js");
const bs58_1 = __importDefault(require("bs58"));
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const helius = new src_1.Helius("YOUR_API_KEY");
        const feePayer = web3_js_1.Keypair.generate(); // Replace with your actual keypair
        const toPubkey = new web3_js_1.PublicKey("TARGET_WALLET_ADDRESS"); // Replace this
        const instructions = [
            web3_js_1.SystemProgram.transfer({
                fromPubkey: feePayer.publicKey,
                toPubkey,
                lamports: 0.05 * web3_js_1.LAMPORTS_PER_SOL,
            }),
        ];
        const signers = [feePayer];
        const lookupTables = []; // Replace if using ALT
        const tipAmount = 100000; // 100k microLamports = 0.0001 SOL
        const { transaction, blockhash, minContextSlot } = yield helius.rpc.createSmartTransactionWithTip(instructions, signers, lookupTables, tipAmount, {
            feePayer,
        });
        const serializedTransaction = bs58_1.default.encode(transaction.serialize());
        const lastValidBlockHeight = blockhash.lastValidBlockHeight;
        console.log("Serialized Transaction (base58):", serializedTransaction);
        console.log("Last Valid Block Height:", lastValidBlockHeight);
        console.log("Min Context Slot:", minContextSlot);
    });
}
main().catch((err) => {
    console.error("Example failed:", err);
    process.exit(1);
});
