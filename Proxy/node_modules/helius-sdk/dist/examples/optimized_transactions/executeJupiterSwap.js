"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src"); // Replace with 'helius-sdk' in a production setting
const web3_js_1 = require("@solana/web3.js");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const helius = new src_1.Helius("YOUR_API_KEY");
        const wallet = web3_js_1.Keypair.generate(); // Replace with your actual keypair
        const result = yield helius.rpc.executeJupiterSwap({
            inputMint: "So11111111111111111111111111111111111111112", // SOL
            outputMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", // USDC
            amount: 10000000, // 0.01 SOL (9 decimals)
            slippageBps: 50, // 0.5% slippage
            restrictIntermediateTokens: true,
            priorityLevel: "high", // 'low' | 'medium' | 'high' | 'very_high'
            maxPriorityFeeLamports: 1000000, // 0.001 SOL
            skipPreflight: true,
            confirmationCommitment: "confirmed",
        }, wallet);
        if (result.success && result.confirmed) {
            console.log(`Swap successful! Received ${result.outputAmount} USDC`);
            console.log(`Transaction: https://orb.helius.dev/tx/${result.signature}`);
        }
        else {
            console.error("Swap failed:", result);
        }
    });
}
main().catch((err) => {
    console.error("Example failed:", err);
    process.exit(1);
});
