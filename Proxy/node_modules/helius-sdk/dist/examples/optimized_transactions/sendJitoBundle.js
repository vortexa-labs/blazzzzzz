"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src"); // Replace with 'helius-sdk' in a production setting
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const helius = new src_1.Helius("YOUR_API_KEY");
        const jitoApiUrl = "https://mainnet.block-engine.jito.wtf/api/v1/bundles";
        // Replace this with your real base58-encoded transaction
        const serializedTransactions = [
            "BASE58_ENCODED_TRANSACTION_STRING_HERE",
        ];
        const bundleId = yield helius.rpc.sendJitoBundle(serializedTransactions, jitoApiUrl);
        console.log(`Bundle sent to Jito. Bundle ID: ${bundleId}`);
    });
}
main().catch((err) => {
    console.error("Example failed:", err);
    process.exit(1);
});
